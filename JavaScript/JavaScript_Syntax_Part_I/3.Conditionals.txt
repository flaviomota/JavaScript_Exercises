Conditionals:

	-> verificam uma condição e desempenham uma determinada tarefa baseada na condição verificada anteriormente;

If:

	-> se determinado evento acontecer, realizamos determinada tarefa;

	Ex.:
	if (true) {
		console.log('This message will print.');
	}

	// output: This message will print.

	if 		-> keyword;
	(...)	-> serve para fornecer a condição a ser verificada;
	...		-> valor da condição;
	{...}	-> se o valor da condição se verificar, o que estiver dentro de chavetas é executado;
			-> se a condição não se verificar, o bloco {...} não é executado;

If...else:

	-> bloco de código que pretendemos que seja executado caso a condição definida em if (...) não seja verificada;
	-> resposta para situações de sim e não;
	-> conhecido como: binary decisions;

	Ex.:
	if (false) {
		console.log('False');
	} else {
		console.log('True');
	}

Comparison Operators:

	-> servem para comparar valores dentro das condições declaradas;

	<	-> menor que;
	>	-> maior que;
	<=	-> menor ou igual a;
	>=	-> maior ou igual a;
	===	-> igual a;
	!==	-> diferente de;

	Ex.:
	10 < 12					// evaluates to true;
	'apples' === 'oranges'	// evaluates to false;

Logical Operators:

	-> são utilizados para adicionar lógica mais sofisticada às nossas condições;

	&&	-> e	- verifica se duas condições são verdadeiras;
	||	-> ou	- verifica se pelo menos uma das condições é veradeira;
	!	-> não, negação de; (bang operator);

	Ex.:
	if (stopLigth === 'green' && pedestrians === 0) {
		console.log('Go!');
	} else {
		console.log('Stop!');
	}

	-> basta apenas uma das condições não ser verificada para que o bloco else seja utilizado;

	if (day === 'saturday' || say === 'sunday') {
		console.log('Enjoy the weekend!');
	} else {
		console.log('Do some work!');
	}

	-> basta que apenas uma das condições seja verdadeira;

	let excited = true;
	console.log(!excited);		// output: false;

	let sleepy = false;
	console.log(!sleepy);		// output: true;

	-> true passa a ser false;
	-> false passa a ser true;

Truthy or Falsy:

	let myVariable = 'I Exist!';

	if (myVariable) {
		console.log(myVariable);
	} else {
		console.log('The variable does not exist!');
	}

	-> por ter um valor corretamente atribuido, a condição verificada é verdadeira, por isso o bloco if é utilizado;

	-> valores considerados falsos para variáveis:
		- 0 (zero);
		- "" ou '' (empty);
		- null;
		- undefined;
		- NaN (not a numner);
	
	Ex.:
	let numberOfApples = 0;
	if (numberOfApples) {
		console.log('Let us eat apples');
	} else {
		console.log('No apples left!');
	}

	// output: No apples left!;

Truthy and Falsy Assignment:

	let username = '';
	let defaultName;

	if (username) {
		defaultName = username;
	} else {
		defaultName = 'Stranger';
	}

	console.log(defaultName);		// output: Stranger;

	pode ser o mesmo que:

	let username = '';
	let defaultName = username || 'Stranger';

	console.log(defaultName);		// output: Stranger;

	|| -> verifica a condição da esquerda;
	-> a variável defaultName receberá o valor real de username se for verdadeiro;
	-> se a variável for falsa (que é o caso, derivado a ter um dos valores definido como falso ''), o valor atribuido à variável defaultName é 'Stranger';
	-> conceito conhecido como short-circuit evaluation;

Ternary Operator:

	-> maneira de simplificar a condição: if...else;

	if (isNigthTime) {
		console.log('Turn on the ligths!');
	} else {
		console.log('Turn off the ligths!');
	}

	pode ser substituido por:

	isNigthTime ? console.log('Turn on the ligths!') : console.log('Turn off the ligths!');

	- isNigthTime	-> condição a ser verificada;
	- ?				-> operador ternário;
	- 1ª expressão	-> se a condição for verdadeira, executa o primeiro comando;
	- :				-> separa a 1ª expressão da 2ª expressão;
	- 2ª expressão	-> se a condição for falsa(não se verificar), executa o segundo comando;
	- ;				-> fim do bloco;
	
	-> apenas utilizado em expressões de verdadeiro ou falso;

Else if Statements:

	-> podemos adicionar mais condições ao nosso if...else;
	-> perimte mais de dois resultados possiveis;
	-> podemos adicionar as vezes que forem necessárias, não tem limite;
	-> serve para criarmos instruções mais complexas;
	-> vem sempre depois de uma declaração if e antes de uma declaração else;

	Ex.:
	let stopLigth = 'yellow';

	if (stopLigth === 'red') {
		console.log('Stop!');
	} else if (stopLigth === 'yellow') {
		console.log('Slow down!');
	} else if (stopLigth === 'green') {
		console.log('Go!');
	} else {
		console.log('Caution! Unknown!');
	}

The switch keyword:

	-> sintax mais simples que else if;
	-> alternativa a else if para quando temos que salvaguardar um elevado numero de ações;

	Ex.:
	let groceryItem = 'papaya';

	switch (groceryItem) {
		case 'tomato':
			console.log('Tomatoes price are $0.49.');
			break;
		case 'lime':
			console.log('Limes are $1.49.');
			break;
		case 'papaya':
			console.log('Papayas are $1.29.');
			break;
		default:
			console.log('Invalid Item!');
			break;
	}

	- switch		-> keyword, inicia a declaração e deve ser seguida de (...);
	- (...)			-> indica a variável ou condição que vai ser analisada;
	- {...}			-> corpo do switch. Todos os comandos devem ser indicados dentro das chavetas;
	- case:			-> keyword, verifica se a expressão é igual à condição estipulada em (...) do switch;
	- console.log	-> comando executado quando case = switch;
	- break;		-> keyword, que diz para sair da condição, pois já encontramos correspondencia;
	- default:		-> keyword, obrigatória em todos os switch. Se nenhum dos case se verificar, então o bloco default é utilizado;