Functions:

	-> O que são funcções?
		- blocos de código que desempenham uma determinada tarefa;
		- blocos de códigos reutilzaveis;

Function Declarations:

	function greetWorld() {
		console.log('Hello World!');
	}										// output: Hello World!

	function 	-> keyword para inicializar funções;
	greetWorld	-> identificador da função;
	{...}		-> corpo da função;

Calling a Function:

	functionName();

	-> pode ser chamada as vezes que forem necessárias;
	-> funções só são executadas depois de chamadas;

Parameters:

	function calculateArea(width, height) {
		console.log(width * height);
	}

	(width, height) -> são os parametros que a função recebe;

	podem ser utilizados da seguinte forma:

		calculateArea(10, 6);

			ou
		
		const rectWidth = 10;
		const rectHeigth = 6;

		calculateArea(rectWidth * rectHeigth);

Default Parameters:

	function greeting(name = 'stranger') {
		console.log(`Hello, ${name}!`);
	}

	greeting('Nick');				// output: Hello, Nick!
	greeting();						// output: Hello, stranger!

	-> podemos definir o argumento como default;
	-> desta forma estamos a acautelar situações emq ue o argumetno não foi passado;

Return:

	function calculateArea(width, height) {
		const area = width * height;
		return area;
	}

	return	-> keyword que devolve o valor aramzenado;
			-> serve para devolver informações da função chamada;
	
	-> se o return não for definido, a função devolve undifined;

	function rectangleArea(width * height) {
		if (width < 0 || height < 0) {
			return 'You need positive integeres to calculate area!';
		}
		return width * height;
	}

Helper Functions:

	-> são funções que são chamadas para dentro de outras funções.

	function multyplyByNineFifths(number) {
		return number * (9/5);
	}

	function getFahrenheit(celcius) {
		return multyplyByNineFifths(celcius) + 32;
	}

	getFahrenheit(15)				// output: 59;

Function Expressions:

	-> podemos atribuir ao valor de uma variável const uma função;

	const calculateArea = function(width, height) {
		const area = width * height;
		return area;
	}

	-> este tipo de funções não podem ser invocadas ou chamadas para ser reutilzadas noutras partes do código;

Arrow Functions:

	=> (arrow)	-> substitui a necessidade de utilizar a keyword function para criar/inicializar funcções;

	functionName (...) => {
		...
	}

	functionName	-> nome atribuido à função;
	(...)			-> parametros que a função recebe;
	=>				-> arrow - que simplifica a criação de funções;
	{...}			-> corpo da função;

Concise Body Arrow Functions:

	zero parameters:
		const functionName = () => {...};

	one parameters:
		const functionName = paramOne => {...};
	
	two or more parameters:
		const functionName = (paramOne, paramTwo) => {...};
	
	functions with single-line block:
		const sumNumbers = number => number + number;

				o mesmo que:
		
		const sumNumbers = number => {
			const sum = number + number;
			return sum;
		}

				OU:
		
		const squareNum = (num) => {
			return num * num;
		}

				o mesmo que:

		const squareNum = num => num * num;

				OU:
		
		const plantNeedsWater = (day) => {
			return day === 'Wednesday' ? true : false;
		};

				o mesmo que:

		const plantNeedsWater = day => day ===  'Wednesday' ? true : false;